spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb?createDatabaseIfNotExist=true
    username: root
    password: password
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"
server:
  port: 5050
# this configuration enables accounts microservices to read the properties at run time
# by using spring-boot-starter-actuator dependency in config server
# http://localhost:5050/actuator/refresh post request that does the refresh which is an unmanageable task to trigger the
# post request event for 1000's of microservices this could be achieved by spring cloud bus
# http://localhost:5050/actuator/busrefresh this does trigger the refresh events
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
  # this configuration allows actuator to expose info related properties
  info:
    env:
      enabled: true


# this root configuration allows to shut down the service from eureka server
endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    # this is self-explanatory
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/
info:
  app:
    name: "accounts"
    description: "Eazy bank accounts application"
    version: 1

resilience4j.circuitbreaker:
  configs:
    default: # default indicates that the below properties are common for all the microservices to get the customization we can refer the circuit breaker name in the [circuitBreaker(config -> config.setName("accountsCircuitBreaker"))]
      slidingWindowSize: 10 #this defines the frequency of hits to the microservice before it goes to open state
      permittedNumberOfCallsInHalfOpenState: 2 # this prop defines to allow two request in half open state before it goes to closed or open status as the circuit breaker cannot be in the closed state forever
      failureRateThreshold: 50 # this prop states that if there is N(50) percentage success rate then move the status to open
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 100
      enableExponentialBackOff: true
      exponentialBackOffMultiplier: 2
